** TEMPLATE METHOD **
Define o esqueleto de um algoritmo em uma operação, postergando a definição de alguns passos para subclasses. O template method permite que as subclasses 
redefinam certos passos de um algoritmo sem mudar sua estrutura
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Como implementar
- Analise o algoritmo de destino para ver se você pode dividi-lo em etapas. Considere quais etapas são comuns a todas as subclasses e quais sempre serão únicas.

- Crie a classe base abstrata e declare o método modelo e um conjunto de métodos abstratos que representam as etapas do algoritmo. 
Descreva a estrutura do algoritmo no método de modelo executando as etapas correspondentes. 
Considere tornar o método de modelo final para evitar que as subclasses o sobrescrevam.

- Tudo bem se todas as etapas acabarem sendo abstratas. No entanto, algumas etapas podem se beneficiar de uma implementação padrão. 
As subclasses não precisam implementar esses métodos.

- Pense em adicionar ganchos entre as etapas cruciais do algoritmo.

- Para cada variação do algoritmo, crie uma nova subclasse concreta. 
Ele deve implementar todas as etapas abstratas, mas também pode substituir algumas das opcionais.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Exemplo Conceitual
Este exemplo ilustra a estrutura do padrão de projeto State e se concentra nas seguintes questões:
- Em que classes é composto?
- Que funções essas classes desempenham?
- De que maneira os elementos do padrão estão relacionados?

-> index.ts
/* A classe abstrata define um método de modelo que contém um esqueleto de algum algoritmo, composto de chamadas para (geralmente) operações primitivas abstratas.
As subclasses concretas devem implementar essas operações, mas deixar o próprio método de modelo intacto. */
abstract class AbstractClass {
    // O método template define o esqueleto de um algoritmo.
    public templateMethod(): void {
        this.baseOperation1();
        this.requiredOperations1();
        this.baseOperation2();
        this.hook1();
        this.requiredOperation2();
        this.baseOperation3();
        this.hook2();
    }
    // Essas operações já possuem implementações.

    protected baseOperation1(): void {
        console.log('AbstractClass says: I am doing the bulk of the work');
    }
    protected baseOperation2(): void {
        console.log('AbstractClass says: But I let subclasses override some operations');
    }
    protected baseOperation3(): void {
        console.log('AbstractClass says: But I am doing the bulk of the work anyway');
    }
    // Essas operações devem ser implementadas em subclasses.

    protected abstract requiredOperations1(): void;
    protected abstract requiredOperation2(): void;

/* Estes são "ganchos". As subclasses podem substituí-las, mas não é obrigatório já que os ganchos já possuem implementação padrão (mas vazia). 
Ganchos fornecer pontos de extensão adicionais em alguns lugares cruciais do algoritmo.         */
    protected hook1(): void { }
    protected hook2(): void { }
}

// As classes concretas devem implementar todas as operações abstratas da classe base. Eles também podem substituir algumas operações com uma implementação padrão.

class ConcreteClass1 extends AbstractClass {
    protected requiredOperations1(): void {
        console.log('ConcreteClass1 says: Implemented Operation1');
    }
    protected requiredOperation2(): void {
        console.log('ConcreteClass1 says: Implemented Operation2');
    }
}

// Normalmente, as classes concretas substituem apenas uma fração das operações da classe base.

class ConcreteClass2 extends AbstractClass {
    protected requiredOperations1(): void {
        console.log('ConcreteClass2 says: Implemented Operation1');
    }
    protected requiredOperation2(): void {
        console.log('ConcreteClass2 says: Implemented Operation2');
    }
    protected hook1(): void {
        console.log('ConcreteClass2 says: Overridden Hook1');
    }
}

/* O código do cliente chama o método de modelo para executar o algoritmo. O código não precisa conhecer a classe concreta de um objeto com o qual 
trabalha, como desde que funcione com objetos através da interface de sua classe base.      */

function clientCode(abstractClass: AbstractClass) {
    // ...
    abstractClass.templateMethod();
    // ...
}
console.log('Same client code can work with different subclasses:');
clientCode(new ConcreteClass1());
console.log('');
console.log('Same client code can work with different subclasses:');
clientCode(new ConcreteClass2());


-> Output.txt: Execution result
Same client code can work with different subclasses:
AbstractClass says: I am doing the bulk of the work
ConcreteClass1 says: Implemented Operation1
AbstractClass says: But I let subclasses override some operations
ConcreteClass1 says: Implemented Operation2
AbstractClass says: But I am doing the bulk of the work anyway

Same client code can work with different subclasses:
AbstractClass says: I am doing the bulk of the work
ConcreteClass2 says: Implemented Operation1
AbstractClass says: But I let subclasses override some operations
ConcreteClass2 says: Overridden Hook1
ConcreteClass2 says: Implemented Operation2
AbstractClass says: But I am doing the bulk of the work anyway
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Aplicabilidade
- Use o padrão Template Method quando quiser permitir que os clientes estendam apenas etapas específicas de um algoritmo, mas não todo o algoritmo ou sua 
estrutura. O Template Method permite transformar um algoritmo monolítico em uma série de etapas individuais que podem ser facilmente estendidas por subclasses, 
mantendo intacta a estrutura definida em uma superclasse.

- Use o padrão quando tiver várias classes que contenham algoritmos quase idênticos com algumas pequenas diferenças. Como resultado, pode ser necessário 
modificar todas as classes quando o algoritmo mudar. Ao transformar esse algoritmo em um método de modelo, você também pode obter as etapas com implementações 
semelhantes em uma superclasse, eliminando a duplicação de código. Código que varia entre subclasses pode permanecer em subclasses.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Prós
- Você pode permitir que os clientes substituam apenas algumas partes de um algoritmo grande, tornando-os menos afetados pelas alterações que ocorrem em 
outras partes do algoritmo.
- Você pode puxar o código duplicado para uma superclasse.

--> Contras
- Some clients may be limited by the provided skeleton of an algorithm.
- You might violate the Liskov Substitution Principle by suppressing a default step implementation via a subclass.
- Template methods tend to be harder to maintain the more steps they have.