** CHAIN OF RESPONSABILITY **
Evitar o acoplamento do remetente de uma solicitação ao seu destinatário, dando a mais de um objeto a chance de tratar a solicitação. 
Encadeia os objetos receptores e passa a solicitação ao longo da cadeia até que um objeto a trate
------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Como implementar
- Declare a interface do manipulador e descreva a assinatura de um método para lidar com solicitações.
Decida como o cliente passará os dados da solicitação para o método. A maneira mais flexível é converter a solicitação em um objeto e passá-la para o 
método de tratamento como um argumento.

- Para eliminar o código clichê duplicado em manipuladores concretos, pode valer a pena criar uma classe de manipulador de base abstrata, derivada da 
interface do manipulador. Essa classe deve ter um campo para armazenar uma referência ao próximo manipulador na cadeia. Considere tornar a classe imutável. 
No entanto, se você planeja modificar as cadeias em tempo de execução, precisa definir um configurador para alterar o valor do campo de referência.
Você também pode implementar o comportamento padrão conveniente para o método de manipulação, que é encaminhar a solicitação para o próximo objeto, 
a menos que não haja mais nenhum. Manipuladores concretos poderão usar esse comportamento chamando o método pai.

- Uma a uma, crie subclasses de manipulador concretas e implemente seus métodos de manipulação. Cada manipulador deve tomar 2 decisões ao receber uma solicitação:
Se ele processará a solicitação.
Se ele passará a solicitação ao longo da cadeia.

- O cliente pode montar correntes por conta própria ou receber correntes pré-construídas de outros objetos. Neste último caso, você deve implementar algumas 
classes de fábrica para construir cadeias de acordo com a configuração ou configurações do ambiente.

- O cliente pode acionar qualquer manipulador na cadeia, não apenas o primeiro. A solicitação será passada ao longo da cadeia até que algum manipulador se 
recuse a passá-la adiante ou até que chegue ao final da cadeia.

- Devido à natureza dinâmica da cadeia, o cliente deve estar preparado para lidar com os seguintes cenários:
A cadeia pode consistir de um único elo.
Alguns pedidos podem não chegar ao fim da cadeia.
Outros podem chegar ao final da cadeia sem manuseio.
----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Exemplo Conceitual
Este exemplo ilustra a estrutura do padrão de projeto Chain of Responsibility e se concentra nas seguintes questões:
- Em que classes consiste?
- Que papéis desempenham essas classes?
- De que maneira os elementos do padrão estão relacionados?

-> index.ts 
// A interface Handler declara um método para construir a cadeia de manipuladores. Ele também declara um método para executar uma solicitação.

interface Handler {
    setNext(handler: Handler): Handler;
    handle(request: string): string;
}

// O comportamento de encadeamento padrão pode ser implementado dentro de uma classe de manipulador base.

abstract class AbstractHandler implements Handler
{
    private nextHandler: Handler;
    public setNext(handler: Handler): Handler {
        this.nextHandler = handler;
        // Returning a handler from here will let us link handlers in a
        // convenient way like this:
        // monkey.setNext(squirrel).setNext(dog);
        return handler;
    }
    public handle(request: string): string {
        if (this.nextHandler) {
            return this.nextHandler.handle(request);
        }
        return null;
    }
}

// Todos os Manipuladores de Concreto lidam com uma solicitação ou a passam para o próximo manipulador na cadeia.

class MonkeyHandler extends AbstractHandler {
    public handle(request: string): string {
        if (request === 'Banana') {
            return `Monkey: I'll eat the ${request}.`;
        }
        return super.handle(request);
    }
}

class SquirrelHandler extends AbstractHandler {
    public handle(request: string): string {
        if (request === 'Nut') {
            return `Squirrel: I'll eat the ${request}.`;
        }
        return super.handle(request);
    }
}

class DogHandler extends AbstractHandler {
    public handle(request: string): string {
        if (request === 'MeatBall') {
            return `Dog: I'll eat the ${request}.`;
        }
        return super.handle(request);
    }
}

// O código do cliente geralmente é adequado para trabalhar com um único manipulador. Na maioria dos casos, ele nem sabe que o manipulador faz parte de uma cadeia.

function clientCode(handler: Handler) {
    const foods = ['Nut', 'Banana', 'Cup of coffee'];
    for (const food of foods) {
        console.log(`Client: Who wants a ${food}?`);
        const result = handler.handle(food);
        if (result) {
            console.log(`  ${result}`);
        } else {
            console.log(`  ${food} was left untouched.`);
        }
    }
}

// A outra parte do código do cliente constrói a cadeia real.

const monkey = new MonkeyHandler();
const squirrel = new SquirrelHandler();
const dog = new DogHandler();
monkey.setNext(squirrel).setNext(dog);

// O cliente deve ser capaz de enviar uma solicitação para qualquer manipulador, não apenas para o primeiro da cadeia.

console.log('Chain: Monkey > Squirrel > Dog\n');
clientCode(monkey);
console.log('');
console.log('Subchain: Squirrel > Dog\n');
clientCode(squirrel);

-> Output.txt 
Chain: Monkey > Squirrel > Dog

Client: Who wants a Nut?
  Squirrel: I'll eat the Nut.
Client: Who wants a Banana?
  Monkey: I'll eat the Banana.
Client: Who wants a Cup of coffee?
  Cup of coffee was left untouched.

Subchain: Squirrel > Dog

Client: Who wants a Nut?
  Squirrel: I'll eat the Nut.
Client: Who wants a Banana?
  Banana was left untouched.
Client: Who wants a Cup of coffee?
  Cup of coffee was left untouched.
----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Aplicabilidade
- Use o padrão Chain of Responsibility quando se espera que seu programa processe diferentes tipos de solicitações de várias maneiras, mas os tipos 
exatos de solicitações e suas sequências são desconhecidos de antemão. O padrão permite vincular vários manipuladores em uma cadeia e, ao receber uma 
solicitação, “perguntar” a cada manipulador se ele pode processá-la. Dessa forma, todos os manipuladores têm a chance de processar a solicitação.

- Use o padrão quando for essencial executar vários manipuladores em uma determinada ordem.
Como você pode vincular os manipuladores na cadeia em qualquer ordem, todas as solicitações passarão pela cadeia exatamente como você planejou.

- Use o padrão CoR quando o conjunto de manipuladores e sua ordem forem alterados no tempo de execução.
Se você fornecer setters para um campo de referência dentro das classes do manipulador, poderá inserir, remover ou reordenar manipuladores dinamicamente.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Prós 
- Você pode controlar a ordem de tratamento da solicitação.
- Princípio da Responsabilidade Única. Você pode desacoplar classes que invocam operações de classes que executam operações.
- Princípio Aberto/Fechado. Você pode introduzir novos manipuladores no aplicativo sem quebrar o código do cliente existente.

--> Contras
- Algumas solicitações podem acabar não atendidas.

