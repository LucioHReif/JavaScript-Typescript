** OBSERVER **
Define uma dependência um para muitos entre objetos, de modo que, quando um objeto muda de estado, todos os seus dependentes são automaticamente 
notificados e atualizados.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Como implementar
- Examine sua lógica de negócios e tente dividi-la em duas partes: a funcionalidade principal, independente de outro código, atuará como o publicador; 
o restante se transformará em um conjunto de classes de assinantes.

- Declare a interface do assinante. No mínimo, ele deve declarar um único método de atualização.

- Declare a interface do editor e descreva um par de métodos para adicionar um objeto de assinante e removê-lo da lista. 
Lembre-se de que os editores devem trabalhar com assinantes apenas por meio da interface do assinante.

- Decida onde colocar a lista de assinaturas real e a implementação dos métodos de assinatura. Normalmente, esse código parece o mesmo para todos os tipos 
de editores, portanto, o lugar óbvio para colocá-lo é em uma classe abstrata derivada diretamente da interface do editor. Editores concretos estendem essa 
classe, herdando o comportamento de assinatura.
No entanto, se você estiver aplicando o padrão a uma hierarquia de classe existente, considere uma abordagem baseada na composição: coloque a lógica de 
assinatura em um objeto separado e faça com que todos os editores reais o usem.

- Crie classes de publicador concretas. Cada vez que algo importante acontece dentro de uma editora, ela deve notificar todos os seus assinantes.

- Implemente os métodos de notificação de atualização em classes de assinantes concretas. A maioria dos assinantes precisaria de alguns dados de contexto 
sobre o evento. Pode ser passado como argumento do método de notificação.
Mas há outra opção. Ao receber uma notificação, o assinante pode buscar quaisquer dados diretamente da notificação. Nesse caso, o publicador deve se 
passar pelo método update. A opção menos flexível é vincular um editor ao assinante permanentemente por meio do construtor.

- O cliente deve criar todos os assinantes necessários e registrá-los com os editores apropriados.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Exemplo Conceitual
Este exemplo ilustra a estrutura do padrão de projeto Observer e se concentra nas seguintes questões:
- Em que classes é composto?
- Que funções essas classes desempenham?
- De que maneira os elementos do padrão estão relacionados?

-> index.ts
// A interface Subject declara um conjunto de métodos para gerenciar assinantes.

interface Subject {
    // Anexe um observador ao assunto.
    attach(observer: Observer): void;

    //Afaste um observador do assunto.
    detach(observer: Observer): void;

    // Notifique todos os observadores sobre um evento.
    notify(): void;
}

// O Subject possui algum estado importante e notifica os observadores quando o estado muda.

class ConcreteSubject implements Subject {

// @type {number} Por uma questão de simplicidade, o estado do Sujeito, essencial para todos os assinantes, é armazenado nesta variável.
    public state: number;

/* @type {Observer[]} Lista de assinantes. Na vida real, a lista dos assinantes podem ser armazenados de forma mais abrangente 
(categorizados por evento tipo, etc.).          */

    private observers: Observer[] = [];
    // Os métodos de gerenciamento de assinaturas.
 
    public attach(observer: Observer): void {
        const isExist = this.observers.includes(observer);
        if (isExist) {
            return console.log('Subject: Observer has been attached already.');
        }
        console.log('Subject: Attached an observer.');
        this.observers.push(observer);
    }

    public detach(observer: Observer): void {
        const observerIndex = this.observers.indexOf(observer);
        if (observerIndex === -1) {
            return console.log('Subject: Nonexistent observer.');
        }
        this.observers.splice(observerIndex, 1);
        console.log('Subject: Detached an observer.');
    }

    // Acionar uma atualização em cada assinante.

    public notify(): void {
        console.log('Subject: Notifying observers...');
        for (const observer of this.observers) {
            observer.update(this);
        }
    }

/* Normalmente, a lógica de assinatura é apenas uma fração do que um Subject pode realmente fazer. Os assuntos geralmente possuem alguma lógica de 
negócios importante, que aciona um método de notificação sempre que algo importante está prestes a acontecer acontecer (ou depois).         */

    public someBusinessLogic(): void {
        console.log('\nSubject: I\'m doing something important.');
        this.state = Math.floor(Math.random() * (10 + 1));
        console.log(`Subject: My state has just changed to: ${this.state}`);
        this.notify();
    }
}

// A interface Observer declara o método de atualização, usado pelos assuntos.

interface Observer {
    // Receive update from subject.
    update(subject: Subject): void;
}

// Os Observadores Concretos reagem às atualizações emitidas pelo Sujeito ao qual foram anexados.

class ConcreteObserverA implements Observer {
    public update(subject: Subject): void {
        if (subject instanceof ConcreteSubject && subject.state < 3) {
            console.log('ConcreteObserverA: Reacted to the event.');
        }
    }
}
class ConcreteObserverB implements Observer {
    public update(subject: Subject): void {
        if (subject instanceof ConcreteSubject && (subject.state === 0 || subject.state >= 2)) {
            console.log('ConcreteObserverB: Reacted to the event.');
        }
    }
}

// Código do cliente
const subject = new ConcreteSubject();
const observer1 = new ConcreteObserverA();
subject.attach(observer1);
const observer2 = new ConcreteObserverB();
subject.attach(observer2);
subject.someBusinessLogic();
subject.someBusinessLogic();
subject.detach(observer2);
subject.someBusinessLogic();


-> Output.txt
Subject: Attached an observer.
Subject: Attached an observer.

Subject: I'm doing something important.
Subject: My state has just changed to: 6
Subject: Notifying observers...
ConcreteObserverB: Reacted to the event.

Subject: I'm doing something important.
Subject: My state has just changed to: 1
Subject: Notifying observers...
ConcreteObserverA: Reacted to the event.
Subject: Detached an observer.

Subject: I'm doing something important.
Subject: My state has just changed to: 5
Subject: Notifying observers...
-----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Aplicabilidade
- Use o padrão Observer quando as alterações no estado de um objeto podem exigir a alteração de outros objetos e o conjunto real de objetos é desconhecido 
de antemão ou muda dinamicamente. Muitas vezes, você pode enfrentar esse problema ao trabalhar com classes da interface gráfica do usuário. 
Por exemplo, você criou classes de botões personalizados e deseja permitir que os clientes conectem algum código personalizado aos seus botões para que 
sejam acionados sempre que um usuário pressionar um botão.
O padrão Observer permite que qualquer objeto que implemente a interface do assinante assine notificações de eventos em objetos do publicador. 
Você pode adicionar o mecanismo de assinatura aos seus botões, permitindo que os clientes conectem seu código personalizado por meio de classes de assinantes 
personalizadas.

- Use o padrão quando alguns objetos em seu aplicativo devem observar outros, mas apenas por um tempo limitado ou em casos específicos.
A lista de assinaturas é dinâmica, então os assinantes podem entrar ou sair da lista sempre que precisarem.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Prós 
- Princípio Aberto/Fechado. Você pode introduzir novas classes de assinantes sem precisar alterar o código do editor 
(e vice-versa se houver uma interface de editor).
- Você pode estabelecer relações entre objetos em tempo de execução.

--> Contras
- Os assinantes são notificados em ordem aleatória.