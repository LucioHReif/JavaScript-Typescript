** MEMENTO **
O Memento é um padrão de projeto que visa delegar a tarefa de salvar e restaurar o estado de um objeto para outro chamado de Caretaker (ou zelador). 
Isso seria algo bem simples de se fazer, porém precisamos tomar cuidado com o encapsulamento dos dados.

Por exemplo, imagine um editor de imagens (ImageEditor) que tem os campos privados filePath e fileFormat (apenas para simplificação do exemplo). 
Não seria possível delegar para outro objeto zelador (Caretaker) a tarefa de salvar ou restaurar o estado porque este objeto não teria acesso aos campos 
privados do ImageEditor. Uma solução possível seria tornar os campos do ImageEditor públicos ao invés de privados, porém estaríamos violando o encapsulamento.

Para solucionar este problema, o Memento diz que devemos ter métodos públicos para backup dentro do ImageEditor, como save() (para salvar o estado atual) e 
restore() (para restaurar um estado antigo). Com isso podemos delegar a tarefa de gerenciar o estado do ImageEditor para o CareTaker sem violar o encapsulamento 
de dados. O CareTaker precisa conhecer o ImageEditor. Porém, ele não deve expor ou alterar nenhum dado do estado. Ele poderá salvar snapshots do ImageEditor em 
uma estrutura de dados qualquer ou restaurá-los quando necessário usando os métodos save() e restore() do próprio ImageEditor.

Você pode usar quaisquer artifícios da linguagem de programação escolhida ou interfaces para prevenir que o CareTaker tenha acesso ou manipule o estado do 
ImageEditor. O importante aqui é não violar o encapsulamento e manter consistência nos dados salvos e ou restaurados.
---------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Como implementar
- Determine qual classe desempenhará o papel do originador. É importante saber se o programa usa um objeto central desse tipo ou vários menores.

- Crie a classe memento. Um por um, declare um conjunto de campos que espelham os campos declarados dentro da classe originadora.

- Torne a classe memento imutável. Um memento deve aceitar os dados apenas uma vez, por meio do construtor. A classe não deve ter setters.

- Se sua linguagem de programação oferecer suporte a classes aninhadas, aninhe o memento dentro do originador. 
Caso contrário, extraia uma interface em branco da classe memento e faça com que todos os outros objetos a usem para se referir ao memento. 
Você pode adicionar algumas operações de metadados à interface, mas nada que exponha o estado do originador.

- Adicione um método para produzir lembranças à classe originadora. O originador deve passar seu estado para o memento por meio de um ou vários argumentos 
do construtor do memento. O tipo de retorno do método deve ser da interface que você extraiu na etapa anterior (assumindo que você o extraiu). 
Nos bastidores, o método de produção de memento deve funcionar diretamente com a classe memento.

- Adicione um método para restaurar o estado do originador para sua classe. Ele deve aceitar um objeto memento como argumento. 
Se você extraiu uma interface na etapa anterior, torne-a o tipo do parâmetro. Nesse caso, você precisa converter o objeto de entrada para a classe memento, 
pois o originador precisa de acesso total a esse objeto.

- O zelador, quer represente um objeto de comando, uma história ou algo totalmente diferente, deve saber quando solicitar novas lembranças ao originador, 
como armazená-las e quando restaurar o originador com uma lembrança específica.

- O link entre cuidadores e originadores pode ser movido para a classe memento. Nesse caso, cada memento deve ser conectado ao originador que o criou. 
O método de restauração também passaria para a classe memento. No entanto, tudo isso faria sentido apenas se a classe memento fosse aninhada no originador 
ou se a classe do originador fornecesse setters suficientes para substituir seu estado.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Exemplo Conceitual
Este exemplo ilustra a estrutura do padrão de projeto Memento e se concentra nas seguintes questões:
- Em que classes é composto?
- Que funções essas classes desempenham?
- De que maneira os elementos do padrão estão relacionados?

-> index.ts
// O Originador mantém algum estado importante que pode mudar com o tempo.
// Também define um método para salvar o estado dentro de um memento e outro método para restaurar o estado dele.

class Originator {
// Para simplificar, o estado do originador é armazenado dentro de uma única variável.

    private state: string;
    constructor(state: string) {
        this.state = state;
        console.log(`Originator: My initial state is: ${state}`);
    }

/* A lógica de negócios do Originador pode afetar seu estado interno. Portanto, o cliente deve fazer backup do estado antes de iniciar os 
métodos do lógica de negócios através do método save().         */

    public doSomething(): void {
        console.log('Originator: I\'m doing something important.');
        this.state = this.generateRandomString(30);
        console.log(`Originator: and my state has changed to: ${this.state}`);
    }

    private generateRandomString(length: number = 10): string {
        const charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        return Array
            .apply(null, { length })
            .map(() => charSet.charAt(Math.floor(Math.random() * charSet.length)))
            .join('');
    }

    // Salva o estado atual dentro de uma lembrança.

    public save(): Memento {
        return new ConcreteMemento(this.state);
    }

    // Restaura o estado do Originador de um objeto memento.

    public restore(memento: Memento): void {
        this.state = memento.getState();
        console.log(`Originator: My state has changed to: ${this.state}`);
    }
}

// A interface Memento fornece uma maneira de recuperar os metadados do memento, como data de criação ou nome. No entanto, não expõe o estado do Originador.

interface Memento {
    getState(): string;
    getName(): string;
    getDate(): string;
}

// O Concrete Memento contém a infraestrutura para armazenar o estado do Originador.

class ConcreteMemento implements Memento {
    private state: string;
    private date: string;
    constructor(state: string) {
        this.state = state;
        this.date = new Date().toISOString().slice(0, 19).replace('T', ' ');
    }

    // O Originador usa esse método ao restaurar seu estado.

    public getState(): string {
        return this.state;
    }
    // O resto dos métodos são usados ​​pelo Caretaker para exibir metadados.

    public getName(): string {
        return `${this.date} / (${this.state.substr(0, 9)}...)`;
    }
    public getDate(): string {
        return this.date;
    }
}

// O zelador não depende da classe Concrete Memento. Portanto, é não tem acesso ao estado do originador, armazenado dentro do memento. 
// Isto funciona com todos os mementos por meio da interface base do Memento.

class Caretaker {
    private mementos: Memento[] = [];
    private originator: Originator;
    constructor(originator: Originator) {
        this.originator = originator;
    }
    public backup(): void {
        console.log('\nCaretaker: Saving Originator\'s state...');
        this.mementos.push(this.originator.save());
    }
    public undo(): void {
        if (!this.mementos.length) {
            return;
        }
        const memento = this.mementos.pop();
        console.log(`Caretaker: Restoring state to: ${memento.getName()}`);
        this.originator.restore(memento);
    }
    public showHistory(): void {
        console.log('Caretaker: Here\'s the list of mementos:');
        for (const memento of this.mementos) {
            console.log(memento.getName());
        }
    }
}

/**
 * Client code.
 */
const originator = new Originator('Super-duper-super-puper-super.');
const caretaker = new Caretaker(originator);
caretaker.backup();
originator.doSomething();
caretaker.backup();
originator.doSomething();
caretaker.backup();
originator.doSomething();
console.log('');
caretaker.showHistory();
console.log('\nClient: Now, let\'s rollback!\n');
caretaker.undo();
console.log('\nClient: Once more!\n');
caretaker.undo();


-> Output.txt
Originator: My initial state is: Super-duper-super-puper-super.

Caretaker: Saving Originator's state...
Originator: I'm doing something important.
Originator: and my state has changed to: qXqxgTcLSCeLYdcgElOghOFhPGfMxo

Caretaker: Saving Originator's state...
Originator: I'm doing something important.
Originator: and my state has changed to: iaVCJVryJwWwbipieensfodeMSWvUY

Caretaker: Saving Originator's state...
Originator: I'm doing something important.
Originator: and my state has changed to: oSUxsOCiZEnohBMQEjwnPWJLGnwGmy

Caretaker: Here's the list of mementos:
2019-02-17 15:14:05 / (Super-dup...)
2019-02-17 15:14:05 / (qXqxgTcLS...)
2019-02-17 15:14:05 / (iaVCJVryJ...)

Client: Now, let's rollback!

Caretaker: Restoring state to: 2019-02-17 15:14:05 / (iaVCJVryJ...)
Originator: My state has changed to: iaVCJVryJwWwbipieensfodeMSWvUY

Client: Once more!

Caretaker: Restoring state to: 2019-02-17 15:14:05 / (qXqxgTcLS...)
Originator: My state has changed to: qXqxgTcLSCeLYdcgElOghOFhPGfMxo
-----------------------------------------------------------------------------------------------------------------------------------------------------------
--> Aplicabilidade
- Use o padrão Memento quando quiser produzir instantâneos do estado do objeto para poder restaurar um estado anterior do objeto.
O padrão Memento permite fazer cópias completas do estado de um objeto, incluindo campos privados, e armazená-los separadamente do objeto. 
Embora a maioria das pessoas se lembre desse padrão graças ao caso de uso “desfazer”, ele também é indispensável ao lidar com transações 
(ou seja, se você precisar reverter uma operação com erro).

- Use o padrão quando o acesso direto aos campos/getters/setters do objeto violar seu encapsulamento. O Memento torna o próprio objeto responsável por 
criar um instantâneo de seu estado. Nenhum outro objeto pode ler o instantâneo, tornando os dados de  estado do objeto original seguros e protegidos.
------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Prós 
- Você pode produzir instantâneos do estado do objeto sem violar seu encapsulamento.
- Você pode simplificar o código do originador permitindo que o responsável mantenha o histórico do estado do originador.

--> Contras
- O aplicativo pode consumir muita RAM se os clientes criarem mementos com muita frequência.
- Os cuidadores devem rastrear o ciclo de vida do originador para poder destruir lembranças obsoletas.
- A maioria das linguagens de programação dinâmica, como PHP, Python e JavaScript, não pode garantir que o estado dentro do memento permaneça intocado.