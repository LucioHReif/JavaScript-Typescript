** SINGLE PATTERN **
O padrão singleton implica que deve haver apenas uma instância para uma classe. Em termos leigos, deve haver apenas um presidente por país por vez. 
Seguindo esse padrão, podemos evitar várias instâncias para uma determinada classe. Um bom exemplo do padrão singleton é a conexão de banco de dados 
em nosso aplicativo. Ter várias instâncias de um banco de dados em nosso aplicativo torna o aplicativo instável. Portanto, o padrão singleton fornece 
uma solução para esse problema gerenciando uma única instância no aplicativo. Vamos ver como implementar o exemplo acima em Node.js com TypeScript:

import {MongoClient,Db} from 'mongodb'
class DBInstance {
    private static instance: Db
    private constructor(){}
    static getInstance() {
        if(!this.instance){
            const URL = "mongodb://localhost:27017"
            const dbName = "sample"    
            MongoClient.connect(URL,(err,client) => {
                if (err) console.log("DB Error",err)
                const db = client.db(dbName);
                this.instance = db
            })

        }
        return this.instance
    }
}
export default DBInstance

Aqui, temos uma classe, DBInstance, com uma instância de atributo. Em DBInstance, temos o método estático getInstance onde reside nossa lógica principal.
Ele verifica se já existe uma instância de banco de dados. Se houver, ele retornará isso. Caso contrário, ele criará uma instância de banco de dados para 
nós e a retornará. Aqui está um exemplo de como podemos usar o padrão singleton dentro de nossas rotas de API:

import express,{  Application, Request, Response } from 'express'
import DBInstance from './helper/DB'
import bodyParser from 'body-parser'
const app = express()
async function start(){
    try{
        app.use(bodyParser.json())
        app.use(bodyParser.urlencoded({extended : true}))
        const db = await DBInstance.getInstance()

        app.get('/todos',async (req : Request,res : Response) => {
            try {
                const db = await DBInstance.getInstance()
                const todos = await db.collection('todo').find({}).toArray()
                res.status(200).json({success : true,data : todos})
            }
            catch(e){
                console.log("Error on fetching",e)
                res.status(500).json({ success : false,data : null })
            }
        })
        pp.post('/todo',async (req : Request,res : Response) => {
            try {
                const db = await DBInstance.getInstance()
                const todo = req.body.todos
               const todoCollection =  await db.collection('todo').insertOne({ name : todo })

                res.status(200).json({ success : true,data : todoCollection })
            }
            catch(e){
                console.log("Error on Inserting",e)
                res.status(500).json({ success : false,data : null })
            }
        })
        app.listen(4000,() => {
            console.log("Server is running on PORT 4000")
        })
    }
    catch(e){
        console.log("Error while starting the server",e)
    }
} start()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Como implementar
- Adicione um campo estático privado à classe para armazenar a instância singleton.

- Declare um método de criação estático público para obter a instância singleton.

- Implemente a “inicialização preguiçosa” dentro do método estático. Ele deve criar um novo objeto em sua primeira chamada e colocá-lo no campo estático. 
O método sempre deve retornar essa instância em todas as chamadas subseqüentes.

- Torne o construtor da classe privado. O método estático da classe ainda poderá chamar o construtor, mas não os outros objetos.

- Revise o código do cliente e substitua todas as chamadas diretas para o construtor do singleton por chamadas para seu método de criação estático.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Exemplo Conceitual
Este exemplo ilustra a estrutura do padrão de projeto Singleton e se concentra nas seguintes questões:
- Em que classes consiste?
- Que papéis desempenham essas classes?
- De que maneira os elementos do padrão estão relacionados?

** index.ts
// A classe Singleton define o método `getInstance` que permite aos clientes acessar a única instância singleton.
class Singleton {
    private static instance: Singleton;

// O construtor do Singleton deve sempre ser privado para evitar chamadas de construção direta com o operador `new`.
    private constructor() { }

// O método estático que controla o acesso à instância singleton.
// Essa implementação permite criar uma subclasse da classe Singleton enquanto mantém apenas uma instância de cada subclasse por perto.
    public static getInstance(): Singleton {
        if (!Singleton.instance) {
            Singleton.instance = new Singleton();
        }
        return Singleton.instance;
    }

// Por fim, qualquer singleton deve definir alguma lógica de negócios, que pode ser executada em sua instância.
    public someBusinessLogic() {
        // ...
    }
}

// The client code.
function clientCode() {
    const s1 = Singleton.getInstance();
    const s2 = Singleton.getInstance();
    if (s1 === s2) {
        console.log('Singleton works, both variables contain the same instance.');
    } else {
        console.log('Singleton failed, variables contain different instances.');
    }
}
clientCode();
** Output.txt: Execution result -> Singleton works, both variables contain the same instance.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Aplicabilidade
- Use o padrão Singleton quando uma classe em seu programa deve ter apenas uma única instância disponível para todos os clientes; por exemplo, um 
único objeto de banco de dados compartilhado por diferentes partes do programa. O padrão Singleton desabilita todos os outros meios de criar objetos 
de uma classe, exceto o método de criação especial. Este método cria um novo objeto ou retorna um existente se já tiver sido criado.

- Use o padrão Singleton quando precisar de um controle mais rígido sobre variáveis ​​globais. Ao contrário das variáveis ​​globais, o padrão Singleton 
garante que haja apenas uma instância de uma classe. Nada, exceto a própria classe Singleton, pode substituir a instância em cache.
Observe que você sempre pode ajustar essa limitação e permitir a criação de qualquer número de instâncias Singleton. 
A única parte do código que precisa ser alterada é o corpo do método getInstance.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
--> Prós
- Você pode ter certeza de que uma classe tem apenas uma única instância.
- Você ganha um ponto de acesso global a essa instância.
- O objeto singleton é inicializado somente quando é solicitado pela primeira vez.

--> Contras
- Viola o Princípio da Responsabilidade Única. O padrão resolve dois problemas ao mesmo tempo.
- O padrão Singleton pode mascarar um projeto ruim, por exemplo, quando os componentes do programa sabem muito uns sobre os outros.
- O padrão requer tratamento especial em um ambiente multithread para que vários threads não criem um objeto singleton várias vezes.
- Pode ser difícil testar a unidade do código do cliente do Singleton porque muitos frameworks de teste dependem de herança ao produzir objetos fictícios. 
Como o construtor da classe singleton é privado e a substituição de métodos estáticos é impossível na maioria das linguagens, você precisará pensar em uma 
maneira criativa de zombar do singleton. Ou simplesmente não escreva os testes. Ou não use o padrão Singleton.