** BRIDGE PATTERN ** 
- Desacopla uma abstração de sua implementação, de forma que as duas podem variar independentemente. Um interruptor doméstico que controla luzes, 
ventiladores de teto, etc. é um exemplo de Bridge. O objetivo do interruptor é ligar ou desligar um dispositivo. 
O interruptor real pode ser implementado como uma corrente de tração, interruptor simples de duas posições ou uma variedade de interruptores dimmer.
- Publica a interface em uma hierarquia de herança e enterre a implementação em sua própria hierarquia de herança.
- Além do encapsulamento, para o isolamento
---------------------------------------------------------------------------------------------------------------------------------------------------------
--> Como implementar
- Identifique as dimensões ortogonais em suas classes. Esses conceitos independentes podem ser: abstração/plataforma, domínio/infraestrutura, 
front-end/back-end ou interface/implementação.

- Veja quais operações o cliente precisa e defina-as na classe de abstração base.

- Determinar as operações disponíveis em todas as plataformas. Declare aqueles que a abstração precisa na interface de implementação geral.

- Para todas as plataformas em seu domínio, crie classes de implementação concretas, mas certifique-se de que todas sigam a interface de implementação.

- Dentro da classe de abstração, adicione um campo de referência para o tipo de implementação. A abstração delega a maior parte do trabalho ao objeto de 
implementação referenciado nesse campo.

- Se você tiver várias variantes de lógica de alto nível, crie abstrações refinadas para cada variante estendendo a classe de abstração base.

- O código cliente deve passar um objeto de implementação para o construtor da abstração para associar um ao outro. Depois disso, o cliente pode 
esquecer a implementação e trabalhar apenas com o objeto de abstração.
---------------------------------------------------------------------------------------------------------------------------------------------------------
--> Exemplo Conceitual
Este exemplo ilustra a estrutura do padrão de projeto Bridge e se concentra nas seguintes questões:
Em que classes é composto?
Que funções essas classes desempenham?
De que maneira os elementos do padrão estão relacionados?

-> index.ts
/* A Abstração define a interface para a parte "controle" das duas classes hierarquias. 
Ele mantém uma referência a um objeto da Implementação hierarquia e delega todo o trabalho real para este objeto.     */

class Abstraction {
    protected implementation: Implementation;
    constructor(implementation: Implementation) {
        this.implementation = implementation;
    }
    public operation(): string {
        const result = this.implementation.operationImplementation();
        return `Abstraction: Base operation with:\n${result}`;
    }
}

// Você pode estender a abstração sem alterar as classes de implementação.

class ExtendedAbstraction extends Abstraction {
    public operation(): string {
        const result = this.implementation.operationImplementation();
        return `ExtendedAbstraction: Extended operation with:\n${result}`;
    }
}

/* A Implementação define a interface para todas as classes de implementação. Isto não precisa corresponder à interface do Abstraction. 
Na verdade, os dois as interfaces podem ser totalmente diferentes. Normalmente, a interface de Implementação fornece apenas operações primitivas, 
enquanto a Abstração define operações superiores operações de nível baseadas nessas primitivas.    */

interface Implementation {
    operationImplementation(): string;
}

// Cada Implementação Concreta corresponde a uma plataforma específica e implementa a interface de Implementação usando a API dessa plataforma.

class ConcreteImplementationA implements Implementation {
    public operationImplementation(): string {
        return 'ConcreteImplementationA: Here\'s the result on the platform A.';
    }
}
class ConcreteImplementationB implements Implementation {
    public operationImplementation(): string {
        return 'ConcreteImplementationB: Here\'s the result on the platform B.';
    }
}

/* Exceto na fase de inicialização, onde um objeto Abstraction é vinculado com um objeto de Implementação específico, o código do cliente 
deve depender apenas de a classe Abstração. Dessa forma, o código do cliente pode suportar qualquer tipo de abstração-combinação de implementação.

function clientCode(abstraction: Abstraction) {
    // ..
    console.log(abstraction.operation());
    // ..
}

// O código do cliente deve ser capaz de funcionar com qualquer combinação de implementação de abstração pré-configurada.

let implementation = new ConcreteImplementationA();
let abstraction = new Abstraction(implementation);
clientCode(abstraction);
console.log('');
implementation = new ConcreteImplementationB();
abstraction = new ExtendedAbstraction(implementation);
clientCode(abstraction);

-> Output.txt
Abstraction: Base operation with:
ConcreteImplementationA: Here's the result on the platform A.

ExtendedAbstraction: Extended operation with:
ConcreteImplementationB: Here's the result on the platform B.
---------------------------------------------------------------------------------------------------------------------------------------------------------
--> Aplicabilidade
- Use o padrão Bridge quando quiser dividir e organizar uma classe monolítica que possui diversas variantes de alguma funcionalidade 
(por exemplo, se a classe pode trabalhar com vários servidores de banco de dados). Quanto maior uma classe se torna, mais difícil é descobrir como ela 
funciona e mais tempo leva para fazer uma mudança. As alterações feitas em uma das variações de funcionalidade podem exigir alterações em toda a classe, 
o que geralmente resulta em erros ou na não resolução de alguns efeitos colaterais críticos.
O padrão Bridge permite dividir a classe monolítica em várias hierarquias de classe. Depois disso, você pode alterar as classes em cada hierarquia 
independentemente das classes nas outras. Essa abordagem simplifica a manutenção do código e minimiza o risco de quebrar o código existente.

- Use o padrão quando precisar estender uma classe em várias dimensões ortogonais (independentes).
O Bridge sugere que você extraia uma hierarquia de classe separada para cada uma das dimensões. A classe original delega o trabalho relacionado aos 
objetos pertencentes a essas hierarquias em vez de fazer tudo sozinha.

- Use o Bridge se precisar alternar implementações em tempo de execução.
Embora seja opcional, o padrão Bridge permite que você substitua o objeto de implementação dentro da abstração. É tão fácil quanto atribuir um novo 
valor a um campo. A propósito, este último item é a principal razão pela qual tantas pessoas confundem o padrão Bridge com o padrão Strategy. 
Lembre-se de que um padrão é mais do que apenas uma determinada maneira de estruturar suas classes. 
Também pode comunicar a intenção e um problema que está sendo abordado.
---------------------------------------------------------------------------------------------------------------------------------------------------------
--> Prós
- Você pode criar classes e aplicativos independentes de plataforma.
- O código do cliente funciona com abstrações de alto nível. Não é exposto aos detalhes da plataforma.
- Princípio Aberto/Fechado. Você pode introduzir novas abstrações e implementações independentemente umas das outras.
- Princípio da Responsabilidade Única. Você pode se concentrar na lógica de alto nível na abstração e nos detalhes da plataforma na implementação.

--> Contras
- Você pode tornar o código mais complicado aplicando o padrão a uma classe altamente coesa.